// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const collection = dart_sdk.collection;
  const html = dart_sdk.html;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const framework = flutter_sdk.src__widgets__framework;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const basic = flutter_sdk.src__widgets__basic;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const list_tile = flutter_sdk.src__material__list_tile;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const floating_action_button = flutter_sdk.src__material__floating_action_button;
  const form = flutter_sdk.src__widgets__form;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const text_form_field = flutter_sdk.src__material__text_form_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const flex = flutter_sdk.src__rendering__flex;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var list = Object.create(dart.library);
  var data = Object.create(dart.library);
  var shared_preferences = Object.create(dart.library);
  var shared_preferences_web = Object.create(dart.library);
  var add_page = Object.create(dart.library);
  var view = Object.create(dart.library);
  var shared_preferences_platform_interface = Object.create(dart.library);
  var summary = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_shared_preferences = Object.create(dart.library);
  var $toString = dartx.toString;
  var $clear = dartx.clear;
  var $isEmpty = dartx.isEmpty;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $keys = dartx.keys;
  var $containsKey = dartx.containsKey;
  var $cast = dartx.cast;
  var $toList = dartx.toList;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $addAll = dartx.addAll;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $map = dartx.map;
  var $localStorage = dartx.localStorage;
  var $forEach = dartx.forEach;
  var $where = dartx.where;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T.VoidToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    voidTovoid: () => (T.voidTovoid = dart.constFn(dart.fnType(dart.void, [dart.void])))(),
    IdentityMapOfString$String: () => (T.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    BuildContextToViewPage: () => (T.BuildContextToViewPage = dart.constFn(dart.fnType(view.ViewPage, [framework.BuildContext])))(),
    BuildContextAndintToListTile: () => (T.BuildContextAndintToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [framework.BuildContext, core.int])))(),
    BuildContextToAddPage: () => (T.BuildContextToAddPage = dart.constFn(dart.fnType(add_page.AddPage, [framework.BuildContext])))(),
    CompleterOfSharedPreferences: () => (T.CompleterOfSharedPreferences = dart.constFn(async.Completer$(shared_preferences.SharedPreferences)))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    ListNOfString: () => (T.ListNOfString = dart.constFn(dart.nullable(T.ListOfString())))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    MapOfString$Object: () => (T.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    MapEntryOfString$Object: () => (T.MapEntryOfString$Object = dart.constFn(core.MapEntry$(core.String, core.Object)))(),
    StringAndObjectToMapEntryOfString$Object: () => (T.StringAndObjectToMapEntryOfString$Object = dart.constFn(dart.fnType(T.MapEntryOfString$Object(), [core.String, core.Object])))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    GlobalKeyOfFormState: () => (T.GlobalKeyOfFormState = dart.constFn(framework.GlobalKey$(form.FormState)))(),
    StringNToStringN: () => (T.StringNToStringN = dart.constFn(dart.fnType(T.StringN(), [T.StringN()])))(),
    BuildContextToSummaryPage: () => (T.BuildContextToSummaryPage = dart.constFn(dart.fnType(summary.SummaryPage, [framework.BuildContext])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    LinkedHashMapOfString$Object: () => (T.LinkedHashMapOfString$Object = dart.constFn(collection.LinkedHashMap$(core.String, core.Object)))(),
    BuildContextToListPage: () => (T.BuildContextToListPage = dart.constFn(dart.fnType(list.ListPage, [framework.BuildContext])))(),
    RouteTobool: () => (T.RouteTobool = dart.constFn(dart.fnType(core.bool, [navigator.Route])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidToFutureOfvoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[4] || CT.C4
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[3] || CT.C3,
        [MethodChannel_name]: "plugins.flutter.io/shared_preferences"
      });
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:flutter_app/screens/list.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.0.17/lib/shared_preferences.dart",
    "package:shared_preferences/shared_preferences.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.3/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart",
    "package:shared_preferences_web/shared_preferences_web.dart",
    "package:flutter_app/screens/add_page.dart",
    "package:flutter_app/screens/view.dart",
    "package:flutter_app/screens/summary.dart",
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.MyApp.new({key: key});
    }
    build(context) {
      data.myJsonList[$clear]();
      return new app.MaterialApp.new({debugShowCheckedModeBanner: false, theme: theme_data.ThemeData.dark(), home: new list.ListPage.new()});
    }
  };
  (main.MyApp.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.MyApp.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.main = function main$0() {
    return async.async(dart.void, function* main$() {
      binding.runApp(new main.MyApp.new());
      let prefs = (yield shared_preferences.SharedPreferences.getInstance());
      yield prefs.remove("myList");
    });
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t0;
    let registrar = (t0 = pluginRegistrar, t0 == null ? plugin_registry.webPluginRegistrar : t0);
    shared_preferences_web.SharedPreferencesPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  list.ListPage = class ListPage extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new list.ListPage.new({key: key});
    }
    createState() {
      return new list._ListPageState.new();
    }
  };
  (list.ListPage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    list.ListPage.__proto__.new.call(this, {key: key});
    ;
  }).prototype = list.ListPage.prototype;
  dart.addTypeTests(list.ListPage);
  dart.addTypeCaches(list.ListPage);
  dart.setMethodSignature(list.ListPage, () => ({
    __proto__: dart.getMethods(list.ListPage.__proto__),
    createState: dart.fnType(framework.State$(list.ListPage), [])
  }));
  dart.setLibraryUri(list.ListPage, I[1]);
  list._ListPageState = class _ListPageState extends framework.State$(list.ListPage) {
    initState() {
      super.initState();
      data.loadList().then(dart.void, dart.fn(value => this.setState(dart.fn(() => {
      }, T.VoidTovoid())), T.voidTovoid()));
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Medical Bills")}), body: data.myJsonList[$isEmpty] ? new basic.Center.new({child: new text.Text.new("No items")}) : new scroll_view.ListView.builder({itemCount: data.myJsonList[$length], itemBuilder: dart.fn((context, index) => {
            let item = data.myJsonList[$_get](index);
            return new list_tile.ListTile.new({title: new text.Text.new("Patient name: " + dart.str(dart.dsend(item, '_get', ["patient_name"]))), onTap: dart.fn(() => {
                navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new view.ViewPage.new({data: new (T.IdentityMapOfString$String()).from(["patient_name", core.String.as(dart.dsend(item, '_get', ["patient_name"])), "address", core.String.as(dart.dsend(item, '_get', ["address"])), "hospital", core.String.as(dart.dsend(item, '_get', ["hospital"])), "dos", core.String.as(dart.dsend(item, '_get', ["dos"])), "bill", core.String.as(dart.dsend(item, '_get', ["bill"]))])}), T.BuildContextToViewPage())}));
              }, T.VoidTovoid())});
          }, T.BuildContextAndintToListTile())}), floatingActionButton: new floating_action_button.FloatingActionButton.extended({onPressed: dart.bind(this, 'navigateToAddPage'), label: new text.Text.new("Add bill")})});
    }
    navigateToAddPage() {
      let route = new page.MaterialPageRoute.new({builder: dart.fn(context => new add_page.AddPage.new(), T.BuildContextToAddPage())});
      navigator.Navigator.push(dart.dynamic, this.context, route);
    }
    static ['_#new#tearOff']() {
      return new list._ListPageState.new();
    }
  };
  (list._ListPageState.new = function() {
    list._ListPageState.__proto__.new.call(this);
    ;
  }).prototype = list._ListPageState.prototype;
  dart.addTypeTests(list._ListPageState);
  dart.addTypeCaches(list._ListPageState);
  dart.setMethodSignature(list._ListPageState, () => ({
    __proto__: dart.getMethods(list._ListPageState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    navigateToAddPage: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(list._ListPageState, I[1]);
  data.saveList = function saveList() {
    return async.async(dart.void, function* saveList() {
      let prefs = (yield shared_preferences.SharedPreferences.getInstance());
      let jsonList = convert.jsonEncode(data.myJsonList);
      yield prefs.setString("myList", jsonList);
    });
  };
  data.loadList = function loadList() {
    return async.async(dart.void, function* loadList() {
      let prefs = (yield shared_preferences.SharedPreferences.getInstance());
      let jsonString = prefs.getString("myList");
      if (jsonString == null) {
        data.myJsonList = [];
      } else {
        data.myJsonList = core.List.as(convert.jsonDecode(jsonString));
      }
      if (data.myJsonList[$isEmpty]) {
        yield prefs.remove("myList");
      }
    });
  };
  dart.defineLazy(data, {
    /*data.myJsonList*/get myJsonList() {
      return [];
    },
    set myJsonList(value) {}
  }, false);
  var _preferenceCache$ = dart.privateName(shared_preferences, "_preferenceCache");
  var _setValue = dart.privateName(shared_preferences, "_setValue");
  shared_preferences.SharedPreferences = class SharedPreferences extends core.Object {
    static ['_#_#tearOff'](_preferenceCache) {
      return new shared_preferences.SharedPreferences.__(_preferenceCache);
    }
    static get _store() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance;
    }
    static getInstance() {
      return async.async(shared_preferences.SharedPreferences, function* getInstance() {
        if (shared_preferences.SharedPreferences._completer == null) {
          let completer = T.CompleterOfSharedPreferences().new();
          try {
            let preferencesMap = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
            completer.complete(new shared_preferences.SharedPreferences.__(preferencesMap));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Exception.is(e)) {
              completer.completeError(e);
              let sharedPrefsFuture = completer.future;
              shared_preferences.SharedPreferences._completer = null;
              return sharedPrefsFuture;
            } else
              throw e$;
          }
          shared_preferences.SharedPreferences._completer = completer;
        }
        return dart.nullCheck(shared_preferences.SharedPreferences._completer).future;
      });
    }
    getKeys() {
      return T.LinkedHashSetOfString().from(this[_preferenceCache$][$keys]);
    }
    get(key) {
      return this[_preferenceCache$][$_get](key);
    }
    getBool(key) {
      return T.boolN().as(this[_preferenceCache$][$_get](key));
    }
    getInt(key) {
      return T.intN().as(this[_preferenceCache$][$_get](key));
    }
    getDouble(key) {
      return T.doubleN().as(this[_preferenceCache$][$_get](key));
    }
    getString(key) {
      return T.StringN().as(this[_preferenceCache$][$_get](key));
    }
    containsKey(key) {
      return this[_preferenceCache$][$containsKey](key);
    }
    getStringList(key) {
      let t1;
      let list = T.ListN().as(this[_preferenceCache$][$_get](key));
      if (list != null && !T.ListOfString().is(list)) {
        list = list[$cast](core.String)[$toList]();
        this[_preferenceCache$][$_set](key, list);
      }
      return T.ListNOfString().as((t1 = list, t1 == null ? null : t1[$toList]()));
    }
    setBool(key, value) {
      return this[_setValue]("Bool", key, value);
    }
    setInt(key, value) {
      return this[_setValue]("Int", key, value);
    }
    setDouble(key, value) {
      return this[_setValue]("Double", key, value);
    }
    setString(key, value) {
      return this[_setValue]("String", key, value);
    }
    setStringList(key, value) {
      return this[_setValue]("StringList", key, value);
    }
    remove(key) {
      let prefixedKey = "flutter." + key;
      this[_preferenceCache$][$remove](key);
      return shared_preferences.SharedPreferences._store.remove(prefixedKey);
    }
    [_setValue](valueType, key, value) {
      core.ArgumentError.checkNotNull(core.Object, value, "value");
      let prefixedKey = "flutter." + key;
      if (T.ListOfString().is(value)) {
        this[_preferenceCache$][$_set](key, value[$toList]());
      } else {
        this[_preferenceCache$][$_set](key, value);
      }
      return shared_preferences.SharedPreferences._store.setValue(valueType, prefixedKey, value);
    }
    commit() {
      return async.async(core.bool, function* commit() {
        return true;
      });
    }
    clear() {
      this[_preferenceCache$][$clear]();
      return shared_preferences.SharedPreferences._store.clear();
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let preferences = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
        this[_preferenceCache$][$clear]();
        this[_preferenceCache$][$addAll](preferences);
      }).bind(this));
    }
    static _getSharedPreferencesMap() {
      return async.async(T.MapOfString$Object(), function* _getSharedPreferencesMap() {
        let fromSystem = (yield shared_preferences.SharedPreferences._store.getAll());
        if (!(fromSystem !== null)) dart.assertFailed(null, I[2], 165, 12, "fromSystem != null");
        let preferencesMap = new (T.IdentityMapOfString$Object()).new();
        for (let key of fromSystem[$keys]) {
          if (!key[$startsWith]("flutter.")) dart.assertFailed(null, I[2], 169, 14, "key.startsWith(_prefix)");
          preferencesMap[$_set](key[$substring]("flutter.".length), dart.nullCheck(fromSystem[$_get](key)));
        }
        return preferencesMap;
      });
    }
    static setMockInitialValues(values) {
      let newValues = values[$map](core.String, core.Object, dart.fn((key, value) => {
        let newKey = key;
        if (!key[$startsWith]("flutter.")) {
          newKey = "flutter." + key;
        }
        return new (T.MapEntryOfString$Object()).__(newKey, value);
      }, T.StringAndObjectToMapEntryOfString$Object()));
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(newValues);
      shared_preferences.SharedPreferences._completer = null;
    }
  };
  (shared_preferences.SharedPreferences.__ = function(_preferenceCache) {
    this[_preferenceCache$] = _preferenceCache;
    ;
  }).prototype = shared_preferences.SharedPreferences.prototype;
  dart.addTypeTests(shared_preferences.SharedPreferences);
  dart.addTypeCaches(shared_preferences.SharedPreferences);
  dart.setMethodSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getMethods(shared_preferences.SharedPreferences.__proto__),
    getKeys: dart.fnType(core.Set$(core.String), []),
    get: dart.fnType(dart.nullable(core.Object), [core.String]),
    getBool: dart.fnType(dart.nullable(core.bool), [core.String]),
    getInt: dart.fnType(dart.nullable(core.int), [core.String]),
    getDouble: dart.fnType(dart.nullable(core.double), [core.String]),
    getString: dart.fnType(dart.nullable(core.String), [core.String]),
    containsKey: dart.fnType(core.bool, [core.String]),
    getStringList: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    setBool: dart.fnType(async.Future$(core.bool), [core.String, core.bool]),
    setInt: dart.fnType(async.Future$(core.bool), [core.String, core.int]),
    setDouble: dart.fnType(async.Future$(core.bool), [core.String, core.double]),
    setString: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(core.bool), [core.String, core.List$(core.String)]),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    [_setValue]: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    commit: dart.fnType(async.Future$(core.bool), []),
    clear: dart.fnType(async.Future$(core.bool), []),
    reload: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(shared_preferences.SharedPreferences, () => ['getInstance', '_getSharedPreferencesMap', 'setMockInitialValues']);
  dart.setStaticGetterSignature(shared_preferences.SharedPreferences, () => ['_store']);
  dart.setLibraryUri(shared_preferences.SharedPreferences, I[3]);
  dart.setFieldSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getFields(shared_preferences.SharedPreferences.__proto__),
    [_preferenceCache$]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences.SharedPreferences, () => ['_prefix', '_completer']);
  dart.defineLazy(shared_preferences.SharedPreferences, {
    /*shared_preferences.SharedPreferences._prefix*/get _prefix() {
      return "flutter.";
    },
    /*shared_preferences.SharedPreferences._completer*/get _completer() {
      return null;
    },
    set _completer(value) {}
  }, false);
  var _storedFlutterKeys = dart.privateName(shared_preferences_web, "_storedFlutterKeys");
  var _decodeValue = dart.privateName(shared_preferences_web, "_decodeValue");
  var _checkPrefix = dart.privateName(shared_preferences_web, "_checkPrefix");
  var _encodeValue = dart.privateName(shared_preferences_web, "_encodeValue");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[4], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[1] || CT.C1)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[5]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  shared_preferences_platform_interface.SharedPreferencesStorePlatform = class SharedPreferencesStorePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance;
    }
    static set instance(instance) {
      if (!instance.isMock) {
        plugin_platform_interface.PlatformInterface.verify(instance, shared_preferences_platform_interface.SharedPreferencesStorePlatform._token);
      }
      shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance = instance;
    }
    get isMock() {
      return false;
    }
  };
  (shared_preferences_platform_interface.SharedPreferencesStorePlatform.new = function() {
    shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__.new.call(this, {token: shared_preferences_platform_interface.SharedPreferencesStorePlatform._token});
    ;
  }).prototype = shared_preferences_platform_interface.SharedPreferencesStorePlatform.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.addTypeCaches(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.setGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getGetters(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    isMock: core.bool
  }));
  dart.setStaticGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setLibraryUri(shared_preferences_platform_interface.SharedPreferencesStorePlatform, I[6]);
  dart.setStaticFieldSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['_token', '_instance']);
  dart.defineLazy(shared_preferences_platform_interface.SharedPreferencesStorePlatform, {
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance*/get _instance() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    },
    set _instance(value) {}
  }, false);
  shared_preferences_web.SharedPreferencesPlugin = class SharedPreferencesPlugin extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static registerWith(registrar) {
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_web.SharedPreferencesPlugin.new();
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        this[_storedFlutterKeys][$forEach](dart.bind(html.window[$localStorage], $remove));
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        let allData = new (T.IdentityMapOfString$Object()).new();
        for (let key of this[_storedFlutterKeys]) {
          allData[$_set](key, this[_decodeValue](dart.nullCheck(html.window[$localStorage][$_get](key))));
        }
        return allData;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_checkPrefix](key);
        html.window[$localStorage][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_checkPrefix](key);
        html.window[$localStorage][$_set](key, this[_encodeValue](value));
        return true;
      }).bind(this));
    }
    [_checkPrefix](key) {
      if (!key[$startsWith]("flutter.")) {
        dart.throw(new core.FormatException.new("Shared preferences keys must start with prefix \"flutter.\".", key, 0));
      }
    }
    get [_storedFlutterKeys]() {
      return html.window[$localStorage][$keys][$where](dart.fn(key => key[$startsWith]("flutter."), T.StringTobool()));
    }
    [_encodeValue](value) {
      return convert.json.encode(value);
    }
    [_decodeValue](encodedValue) {
      let decodedValue = convert.json.decode(encodedValue);
      if (core.List.is(decodedValue)) {
        return decodedValue[$cast](core.String);
      }
      return dart.nullCheck(decodedValue);
    }
    static ['_#new#tearOff']() {
      return new shared_preferences_web.SharedPreferencesPlugin.new();
    }
  };
  (shared_preferences_web.SharedPreferencesPlugin.new = function() {
    shared_preferences_web.SharedPreferencesPlugin.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_web.SharedPreferencesPlugin.prototype;
  dart.addTypeTests(shared_preferences_web.SharedPreferencesPlugin);
  dart.addTypeCaches(shared_preferences_web.SharedPreferencesPlugin);
  dart.setMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getMethods(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, dart.nullable(core.Object)]),
    [_checkPrefix]: dart.fnType(dart.void, [core.String]),
    [_encodeValue]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [_decodeValue]: dart.fnType(core.Object, [core.String])
  }));
  dart.setStaticMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['registerWith']);
  dart.setGetterSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getGetters(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    [_storedFlutterKeys]: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(shared_preferences_web.SharedPreferencesPlugin, I[7]);
  add_page.AddPage = class AddPage extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new add_page.AddPage.new({key: key});
    }
    createState() {
      return new add_page._AddPageState.new();
    }
  };
  (add_page.AddPage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    add_page.AddPage.__proto__.new.call(this, {key: key});
    ;
  }).prototype = add_page.AddPage.prototype;
  dart.addTypeTests(add_page.AddPage);
  dart.addTypeCaches(add_page.AddPage);
  dart.setMethodSignature(add_page.AddPage, () => ({
    __proto__: dart.getMethods(add_page.AddPage.__proto__),
    createState: dart.fnType(framework.State$(add_page.AddPage), [])
  }));
  dart.setLibraryUri(add_page.AddPage, I[8]);
  var _formKey = dart.privateName(add_page, "_formKey");
  add_page._AddPageState = class _AddPageState extends framework.State$(add_page.AddPage) {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Add medical bill")}), body: new form.Form.new({key: this[_formKey], child: new scroll_view.ListView.new({padding: new edge_insets.EdgeInsets.all(20), children: T.JSArrayOfWidget().of([new text_form_field.TextFormField.new({controller: this.patient_nameController, decoration: new input_decorator.InputDecoration.new({hintText: "Patient name"}), validator: dart.fn(value => {
                  if (value == null || value[$isEmpty]) {
                    return "This field is required";
                  }
                  return null;
                }, T.StringNToStringN())}), new text_form_field.TextFormField.new({controller: this.addressController, decoration: new input_decorator.InputDecoration.new({hintText: "Address"}), validator: dart.fn(value => {
                  if (value == null || value[$isEmpty]) {
                    return "This field is required";
                  }
                  return null;
                }, T.StringNToStringN())}), new text_form_field.TextFormField.new({controller: this.hospitalController, decoration: new input_decorator.InputDecoration.new({hintText: "Hospital name"}), validator: dart.fn(value => {
                  if (value == null || value[$isEmpty]) {
                    return "This field is required";
                  }
                  return null;
                }, T.StringNToStringN())}), new text_form_field.TextFormField.new({controller: this.dosController, decoration: new input_decorator.InputDecoration.new({hintText: "Date of service"}), validator: dart.fn(value => {
                  if (value == null || value[$isEmpty]) {
                    return "This field is required";
                  }
                  return null;
                }, T.StringNToStringN())}), new text_form_field.TextFormField.new({controller: this.billController, decoration: new input_decorator.InputDecoration.new({hintText: "Bill amount"}), validator: dart.fn(value => {
                  if (value == null || value[$isEmpty]) {
                    return "This field is required";
                  }
                  return null;
                }, T.StringNToStringN())}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => async.async(dart.void, (function*() {
                  if (dart.nullCheck(this[_formKey].currentState).validate()) {
                    let patient_name = this.patient_nameController.text;
                    let address = this.addressController.text;
                    let hospital = this.hospitalController.text;
                    let dos = this.dosController.text;
                    let bill = this.billController.text;
                    let enteredData = new (T.IdentityMapOfString$String()).from(["patient_name", patient_name, "address", address, "hospital", hospital, "dos", dos, "bill", bill]);
                    yield navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new summary.SummaryPage.new({data: enteredData}), T.BuildContextToSummaryPage())}));
                  }
                }).bind(this)), T.VoidToFutureOfvoid()), child: new text.Text.new("Submit")})])})})});
    }
    static ['_#new#tearOff']() {
      return new add_page._AddPageState.new();
    }
  };
  (add_page._AddPageState.new = function() {
    this[_formKey] = T.GlobalKeyOfFormState().new();
    this.patient_nameController = new editable_text.TextEditingController.new();
    this.addressController = new editable_text.TextEditingController.new();
    this.hospitalController = new editable_text.TextEditingController.new();
    this.dosController = new editable_text.TextEditingController.new();
    this.billController = new editable_text.TextEditingController.new();
    add_page._AddPageState.__proto__.new.call(this);
    ;
  }).prototype = add_page._AddPageState.prototype;
  dart.addTypeTests(add_page._AddPageState);
  dart.addTypeCaches(add_page._AddPageState);
  dart.setMethodSignature(add_page._AddPageState, () => ({
    __proto__: dart.getMethods(add_page._AddPageState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(add_page._AddPageState, I[8]);
  dart.setFieldSignature(add_page._AddPageState, () => ({
    __proto__: dart.getFields(add_page._AddPageState.__proto__),
    [_formKey]: dart.finalFieldType(framework.GlobalKey$(form.FormState)),
    patient_nameController: dart.fieldType(editable_text.TextEditingController),
    addressController: dart.fieldType(editable_text.TextEditingController),
    hospitalController: dart.fieldType(editable_text.TextEditingController),
    dosController: dart.fieldType(editable_text.TextEditingController),
    billController: dart.fieldType(editable_text.TextEditingController)
  }));
  var data$ = dart.privateName(view, "ViewPage.data");
  view.ViewPage = class ViewPage extends framework.StatelessWidget {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    static ['_#new#tearOff'](opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      return new view.ViewPage.new({data: data});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Medical bill record for " + dart.str(this.data[$_get]("patient_name")))}), body: new basic.Padding.new({padding: new edge_insets.EdgeInsets.all(20), child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: T.JSArrayOfWidget().of([new text.Text.new("Patient name: " + dart.str(this.data[$_get]("patient_name"))), new basic.SizedBox.new({height: 20}), new text.Text.new("Address: " + dart.str(this.data[$_get]("address"))), new basic.SizedBox.new({height: 20}), new text.Text.new("Hospital: " + dart.str(this.data[$_get]("hospital"))), new basic.SizedBox.new({height: 20}), new text.Text.new("Date of service: " + dart.str(this.data[$_get]("dos"))), new basic.SizedBox.new({height: 20}), new text.Text.new("Bill amount: " + dart.str(this.data[$_get]("bill"))), new basic.SizedBox.new({height: 20})])})})});
    }
  };
  (view.ViewPage.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    this[data$] = data;
    view.ViewPage.__proto__.new.call(this);
    ;
  }).prototype = view.ViewPage.prototype;
  dart.addTypeTests(view.ViewPage);
  dart.addTypeCaches(view.ViewPage);
  dart.setMethodSignature(view.ViewPage, () => ({
    __proto__: dart.getMethods(view.ViewPage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(view.ViewPage, I[9]);
  dart.setFieldSignature(view.ViewPage, () => ({
    __proto__: dart.getFields(view.ViewPage.__proto__),
    data: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  var _data = dart.privateName(shared_preferences_platform_interface, "_data");
  shared_preferences_platform_interface.InMemorySharedPreferencesStore = class InMemorySharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static ['_#empty#tearOff']() {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty();
    }
    static ['_#withData#tearOff'](data) {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(data);
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        this[_data][$clear]();
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return T.LinkedHashMapOfString$Object().from(this[_data]);
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_data][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_data][$_set](key, value);
        return true;
      }).bind(this));
    }
  };
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty = function() {
    this[_data] = new (T.IdentityMapOfString$Object()).new();
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData = function(data) {
    this[_data] = T.LinkedHashMapOfString$Object().from(data);
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.addTypeCaches(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.setMethodSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object])
  }));
  dart.setLibraryUri(shared_preferences_platform_interface.InMemorySharedPreferencesStore, I[6]);
  dart.setFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getFields(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    [_data]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  var data$0 = dart.privateName(summary, "SummaryPage.data");
  summary.SummaryPage = class SummaryPage extends framework.StatelessWidget {
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
    static ['_#new#tearOff'](opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      return new summary.SummaryPage.new({data: data});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Summary")}), body: new basic.Padding.new({padding: new edge_insets.EdgeInsets.all(20), child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: T.JSArrayOfWidget().of([new text.Text.new("Patient name: " + dart.str(this.data[$_get]("patient_name"))), new basic.SizedBox.new({height: 20}), new text.Text.new("Address: " + dart.str(this.data[$_get]("address"))), new basic.SizedBox.new({height: 20}), new text.Text.new("Hospital: " + dart.str(this.data[$_get]("hospital"))), new basic.SizedBox.new({height: 20}), new text.Text.new("Date of service: " + dart.str(this.data[$_get]("dos"))), new basic.SizedBox.new({height: 20}), new text.Text.new("Bill amount: " + dart.str(this.data[$_get]("bill"))), new basic.SizedBox.new({height: 20}), new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.end, children: T.JSArrayOfWidget().of([new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => async.async(dart.void, (function*() {
                      data.myJsonList[$add](this.data);
                      yield data.saveList();
                      navigator.Navigator.of(context).pushAndRemoveUntil(dart.dynamic, new page.MaterialPageRoute.new({builder: dart.fn(context => new list.ListPage.new(), T.BuildContextToListPage())}), dart.fn(route => false, T.RouteTobool()));
                    }).bind(this)), T.VoidToFutureOfvoid()), child: new text.Text.new("Confirm")}), new basic.SizedBox.new({width: 10}), new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                      navigator.Navigator.pop(T.ObjectN(), context);
                    }, T.VoidTovoid()), child: new text.Text.new("Back")})])})])})})});
    }
  };
  (summary.SummaryPage.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    this[data$0] = data;
    summary.SummaryPage.__proto__.new.call(this);
    ;
  }).prototype = summary.SummaryPage.prototype;
  dart.addTypeTests(summary.SummaryPage);
  dart.addTypeCaches(summary.SummaryPage);
  dart.setMethodSignature(summary.SummaryPage, () => ({
    __proto__: dart.getMethods(summary.SummaryPage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(summary.SummaryPage, I[10]);
  dart.setFieldSignature(summary.SummaryPage, () => ({
    __proto__: dart.getFields(summary.SummaryPage.__proto__),
    data: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[5]);
  method_channel_shared_preferences.MethodChannelSharedPreferencesStore = class MethodChannelSharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    remove(key) {
      return async.async(core.bool, function* remove() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "remove", new (T.IdentityMapOfString$dynamic()).from(["key", key])));
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, function* setValue() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "set" + valueType, new (T.IdentityMapOfString$dynamic()).from(["key", key, "value", value])));
      });
    }
    clear() {
      return async.async(core.bool, function* clear() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clear"));
      });
    }
    getAll() {
      return async.async(T.MapOfString$Object(), function* getAll() {
        let preferences = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAll"));
        if (preferences == null) {
          return new (T.IdentityMapOfString$Object()).new();
        }
        return preferences;
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    }
  };
  (method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new = function() {
    method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = method_channel_shared_preferences.MethodChannelSharedPreferencesStore.prototype;
  dart.addTypeTests(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.addTypeCaches(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.setMethodSignature(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, () => ({
    __proto__: dart.getMethods(method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [])
  }));
  dart.setLibraryUri(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, I[11]);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_shared_preferences, {
    /*method_channel_shared_preferences._kChannel*/get _kChannel() {
      return C[2] || CT.C2;
    }
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:flutter_app/screens/list.dart": list,
    "package:flutter_app/screens/data.dart": data,
    "package:shared_preferences/shared_preferences.dart": shared_preferences,
    "package:shared_preferences_web/shared_preferences_web.dart": shared_preferences_web,
    "package:flutter_app/screens/add_page.dart": add_page,
    "package:flutter_app/screens/view.dart": view,
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart": shared_preferences_platform_interface,
    "package:flutter_app/screens/summary.dart": summary,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart": method_channel_shared_preferences
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/screens/list.dart","/zapp/project/lib/screens/data.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.0.17/lib/shared_preferences.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.3/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.1.0/lib/shared_preferences_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_web-2.0.4/lib/shared_preferences_web.dart","/zapp/project/lib/screens/add_page.dart","/zapp/project/lib/screens/view.dart","/zapp/project/lib/screens/summary.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.1.0/lib/method_channel_shared_preferences.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    screens__list: list,
    screens__data: data,
    shared_preferences: shared_preferences,
    shared_preferences_web: shared_preferences_web,
    screens__add_page: add_page,
    screens__view: view,
    shared_preferences_platform_interface: shared_preferences_platform_interface,
    screens__summary: summary,
    plugin_platform_interface: plugin_platform_interface,
    method_channel_shared_preferences: method_channel_shared_preferences
  };
}));

//# sourceMappingURL=main.js.map
